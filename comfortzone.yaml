substitutions:
  de_pin: "5"

esphome:
  name: comfortzone
  platformio_options:
    board_build.f_flash: 40000000L
    board_build.flash_mode: dio
    board_build.flash_size: 4MB
    build_flags:
      - "-O3"
      - "-DHP_PROTOCOL=180"
  libraries:
    - https://github.com/vinnyspb/FastCRC.git
    - https://github.com/rageousbeast/comfortzone_heatpump.git
  includes:
    - esphome_rs485.h
    - comfortzone_esphome.h
    - comfortzone_esphome.cpp
  on_boot: 
    - priority: 90
      then: 
      - output.turn_off: re_de

esp32:
  variant: ESP32C3
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf
    
output:
  - platform: gpio
    pin: ${de_pin}
    id: re_de

uart:
  id: uart_bus
  tx_pin: 6
  rx_pin: 7
  baud_rate: 19200
  data_bits: 8
  parity: NONE
  stop_bits: 1

globals:
  - id: te3_offset
    type: float
    restore_value: yes
    initial_value: '0.0'

sensor:
- platform: custom
  lambda: |-
    auto cz = esphome::comfortzone::ComfortzoneComponent::get_singleton(id(uart_bus), $de_pin);
    return cz->get_sensors();

  sensors:
    - name: "Days until filter change"
      unit_of_measurement: days
    - name: "Outdoor temperature"
      unit_of_measurement: °C
      accuracy_decimals: 1
    - name: "Flow water temperature"
      unit_of_measurement: °C
      accuracy_decimals: 1
    - name: "Return water temperature"
      unit_of_measurement: °C
      accuracy_decimals: 1
    - name: "Indoor temperature"
      unit_of_measurement: °C
      accuracy_decimals: 1
    - name: "Hot gas temperature"
      unit_of_measurement: °C
      accuracy_decimals: 1
    - name: "Exchanger out temperature"
      unit_of_measurement: °C
      accuracy_decimals: 1
    - name: "Evaporator in temperature"
      unit_of_measurement: °C
      accuracy_decimals: 1
    - name: "Exhaust air temperature"
      unit_of_measurement: °C
      accuracy_decimals: 1
    - name: "Hot water temperature"
      unit_of_measurement: °C
      accuracy_decimals: 1
    - name: "Expansion valve calculated setting"
      unit_of_measurement: K
      accuracy_decimals: 1
    - name: "Expansion valve temperature difference"
      unit_of_measurement: K
      accuracy_decimals: 1
    - name: "Current compressor frequency"
      unit_of_measurement: Hz
    - name: "Current compressor power"
      unit_of_measurement: W
    - name: "Current compressor additional power"
      unit_of_measurement: W
    - name: "Current compressor total power"
      unit_of_measurement: W
    - name: "Current compressor input power"
      id: current_compressor_input_power
      unit_of_measurement: W
    - name: "Current compressor heating input power"
      id: current_compressor_heating_input_power
      unit_of_measurement: W
    - name: "Current compressor water input power"
      id: current_compressor_water_input_power
      unit_of_measurement: W
    - name: "Compressor energy"
      unit_of_measurement: kWh
    - name: "Additional energy"
      unit_of_measurement: kWh
    - name: "Hot water energy"
      unit_of_measurement: kWh
    - name: "Compressor runtime"
      unit_of_measurement: min
    - name: "Total runtime"
      unit_of_measurement: min
    - name: "Room heating setting"
      unit_of_measurement: °C
      accuracy_decimals: 1
    - name: "Hot water setting"
      unit_of_measurement: °C
      accuracy_decimals: 1
    - name: "Fan speed duty"
      unit_of_measurement: "%"
    - name: "Hot water calculated setting"
      unit_of_measurement: °C
      accuracy_decimals: 1
    - name: "Heating CoP"
      state_class: measurement
      accuracy_decimals: 2
    - name: "Hot Water CoP"
      state_class: measurement
      accuracy_decimals: 2
    - name: "Indoor temperature sensor offset"
      unit_of_measurement: °C
      accuracy_decimals: 1
    - name: "Target flow water temperature"
      unit_of_measurement: °C
      accuracy_decimals: 1
- platform: total_daily_energy
  name: "Total Daily Input Energy"
  power_id: current_compressor_input_power
- platform: total_daily_energy
  name: "Total Daily Heating Input Energy"
  power_id: current_compressor_heating_input_power
- platform: total_daily_energy
  name: "Total Daily Water Input Energy"
  power_id: current_compressor_water_input_power

binary_sensor:
  - platform: custom
    lambda: |-
      auto cz = esphome::comfortzone::ComfortzoneComponent::get_singleton(id(uart_bus), $de_pin);
      return cz->get_binary_sensors();
  
    binary_sensors:
      - name: "Filter alarm"
      - name: "Hot water production"
      - name: "Room heating in progress"
      - name: "Additional power enabled"
      - name: "Defrost enabled"
      - name: "Extra hot water setting"

text_sensor:
  - platform: custom
    lambda: |-
      auto cz = esphome::comfortzone::ComfortzoneComponent::get_singleton(id(uart_bus), $de_pin);
      return cz->get_text_sensors();
  
    text_sensors:
      - name: "Compressor activity"
      - name: "Mode"
      - name: "Fan speed"
      - name: "Hot water priority setting"

climate:
  - platform: custom
    lambda: |-
      auto cz = esphome::comfortzone::ComfortzoneComponent::get_singleton(id(uart_bus), $de_pin);
      return cz->get_climate_entities();

    climates:
      - name: "ComfortZone EX50 heating"
      - name: "ComfortZone EX50 hot water"

time:
  - platform: sntp
    id: sntp_time

logger:
  level: INFO

# Enable Home Assistant API
api:
  services:
    - service: set_sensor_offset
      variables:
        sensor_num: int
        offset: float
      then:
        - lambda: |-
            auto cz = esphome::comfortzone::ComfortzoneComponent::get_singleton(id(uart_bus), $de_pin);
            cz->set_sensor_offset(sensor_num, offset);
    - service: override_indoor_temperature
      variables:
        current_temperature: float
      then:
        - lambda: |-
            auto cz = esphome::comfortzone::ComfortzoneComponent::get_singleton(id(uart_bus), $de_pin);
            cz->override_indoor_temperature(current_temperature);
    - service: debug_reroute
      variables:
        ip: string
        port: int
        timeout: int
      then:
        - lambda: |-
            auto cz = esphome::comfortzone::ComfortzoneComponent::get_singleton(id(uart_bus), $de_pin);
            cz->debug_reroute(ip, port, timeout);
    - service: enable_fireplace_mode
      then:
        - lambda: |-
            auto cz = esphome::comfortzone::ComfortzoneComponent::get_singleton(id(uart_bus), $de_pin);
            cz->set_fireplace_mode(true);
    - service: disable_fireplace_mode
      then:
        - lambda: |-
            auto cz = esphome::comfortzone::ComfortzoneComponent::get_singleton(id(uart_bus), $de_pin);
            cz->set_fireplace_mode(false);
    - service: set_room_temperature
      variables:
        current_temperature: float
      then:
        - lambda: |-
            auto cz = esphome::comfortzone::ComfortzoneComponent::get_singleton(id(uart_bus), $de_pin);
            cz->set_room_temperature(current_temperature);
    - service: set_hot_water_temperature
      variables:
        current_temperature: float
      then:
        - lambda: |-
            auto cz = esphome::comfortzone::ComfortzoneComponent::get_singleton(id(uart_bus), $de_pin);
            cz->set_hot_water_temperature(current_temperature);
    - service: set_hot_water_priority
      variables:
        priority: int
      then:
        - lambda: |-
            auto cz = esphome::comfortzone::ComfortzoneComponent::get_singleton(id(uart_bus), $de_pin);
            cz->set_hot_water_priority(priority);
    - service: set_led_luminosity
      variables:
        luminosity: int
      then:
        - lambda: |-
            auto cz = esphome::comfortzone::ComfortzoneComponent::get_singleton(id(uart_bus), $de_pin);
            cz->set_led_luminosity(luminosity);
    - service: set_fan_speed
      variables:
        speed: int
      then:
        - lambda: |-
            auto cz = esphome::comfortzone::ComfortzoneComponent::get_singleton(id(uart_bus), $de_pin);
            cz->set_fan_speed(speed);
    - service: enable_extra_hot_water
      then:
        - lambda: |-
            auto cz = esphome::comfortzone::ComfortzoneComponent::get_singleton(id(uart_bus), $de_pin);
            cz->set_extra_hot_water(true);
    - service: disable_extra_hot_water
      then:
        - lambda: |-
            auto cz = esphome::comfortzone::ComfortzoneComponent::get_singleton(id(uart_bus), $de_pin);
            cz->set_extra_hot_water(false);
    
ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: none